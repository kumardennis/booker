create extension if not exists "moddatetime" with schema "extensions";


alter table "public"."join_group_requests" drop constraint "join_group_requests_group_id_fkey";

alter table "public"."users" drop constraint "users_userId_fkey";

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "role" text not null default ''::text
);


alter table "public"."club_groups" add column "level" numeric not null default '1'::numeric;

alter table "public"."clubs" add column "image" text;

alter table "public"."history_events" add column "event_type" text not null;

alter table "public"."history_events" alter column "group_id" drop not null;

alter table "public"."history_events" alter column "training_id" drop not null;

alter table "public"."join_group_requests" drop column "group_id";

alter table "public"."join_group_requests" add column "club_group_id" bigint not null;

alter table "public"."users" drop column "userId";

alter table "public"."users" add column "is_club_admin" boolean default false;

alter table "public"."users" add column "user_id" uuid not null;

alter table "public"."users_groups" add column "is_active" boolean not null default true;

alter table "public"."users_groups" add column "updated_at" timestamp with time zone;

alter table "public"."users_trainings" add column "updated_at" timestamp with time zone;

CREATE UNIQUE INDEX club_groups_id_key ON public.club_groups USING btree (id);

CREATE UNIQUE INDEX join_group_requests_id_key ON public.join_group_requests USING btree (id);

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX trainers_groups_id_key ON public.trainers_groups USING btree (id);

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."club_groups" add constraint "club_groups_id_key" UNIQUE using index "club_groups_id_key";

alter table "public"."club_groups" add constraint "club_groups_level_check" CHECK ((level < (6)::numeric)) not valid;

alter table "public"."club_groups" validate constraint "club_groups_level_check";

alter table "public"."join_group_requests" add constraint "join_group_requests_id_key" UNIQUE using index "join_group_requests_id_key";

alter table "public"."trainers_groups" add constraint "trainers_groups_id_key" UNIQUE using index "trainers_groups_id_key";

alter table "public"."join_group_requests" add constraint "join_group_requests_group_id_fkey" FOREIGN KEY (club_group_id) REFERENCES club_groups(id) not valid;

alter table "public"."join_group_requests" validate constraint "join_group_requests_group_id_fkey";

alter table "public"."users" add constraint "users_userId_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."users" validate constraint "users_userId_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.accept_join_group_request(request_id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
declare
_user_id int;
_club_group_id int;
_new_record_id int;

begin 

update join_group_requests
set is_accepted = true
where id = request_id;

select user_id, club_group_id 
into _user_id, _club_group_id
from join_group_requests 
where id = request_id;

insert into users_groups (user_id, club_group_id, is_active)
values (_user_id, _club_group_id, true)
returning id into _new_record_id;

return _new_record_id;
end;
$function$
;

grant delete on table "public"."roles" to "anon";

grant insert on table "public"."roles" to "anon";

grant references on table "public"."roles" to "anon";

grant select on table "public"."roles" to "anon";

grant trigger on table "public"."roles" to "anon";

grant truncate on table "public"."roles" to "anon";

grant update on table "public"."roles" to "anon";

grant delete on table "public"."roles" to "authenticated";

grant insert on table "public"."roles" to "authenticated";

grant references on table "public"."roles" to "authenticated";

grant select on table "public"."roles" to "authenticated";

grant trigger on table "public"."roles" to "authenticated";

grant truncate on table "public"."roles" to "authenticated";

grant update on table "public"."roles" to "authenticated";

grant delete on table "public"."roles" to "service_role";

grant insert on table "public"."roles" to "service_role";

grant references on table "public"."roles" to "service_role";

grant select on table "public"."roles" to "service_role";

grant trigger on table "public"."roles" to "service_role";

grant truncate on table "public"."roles" to "service_role";

grant update on table "public"."roles" to "service_role";

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.users_groups FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');

CREATE TRIGGER handle_updated_at BEFORE UPDATE ON public.users_trainings FOR EACH ROW EXECUTE FUNCTION moddatetime('updated_at');


